---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "tinkerbell.fullname" . | printf "%s-nginx" }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "tinkerbell.labels" . | nindent 4 }}
    app.kubernetes.io/name: nginx
    app.kubernetes.io/version: {{ .Values.nginx.image.tag }}
spec:
  replicas: {{ .Values.nginx.replicas }}
  selector:
    matchLabels:
      {{- include "tinkerbell.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/name: nginx
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        k8s.v1.cni.cncf.io/networks: |
          [
            {
              "interface": "net1",
              "ips": [
                "{{ .Values.nginx.ip }}/{{ .Values.network.prefix }}"
              ],
              "name": "tink",
              "namespace": "{{ .Release.Namespace }}"
            }
          ]
      labels:
        {{- include "tinkerbell.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/name: nginx
    spec:
      restartPolicy: Always
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "tinkerbell.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.boots.podSecurityContext | nindent 8 }}
      containers:
        - name: nginx
          image: {{ printf "%s:%s" .Values.nginx.image.repository (default "alpine" .Values.nginx.image.tag) }}
          imagePullPolicy: {{ .Values.nginx.image.pullPolicy }}
          name: nginx
          ports:
            - containerPort: 80
              hostPort: 8080
              name: http
          volumeMounts:
            - mountPath: /usr/share/nginx/html
              name: webroot
          securityContext:
            {{- toYaml .Values.nginx.securityContext | nindent 12 }}
          resources:
            {{- toYaml .Values.nginx.resources | nindent 12 }}
      volumes:
        - name: webroot
          persistentVolumeClaim:
            claimName: {{ include "tinkerbell.fullname" . | printf "%s-nginx" }}
        ## TODO: Why is this not mounted via the volumeMounts directive?
        - name: source-certs
          secret:
            secretName: {{ include "tinkerbell.fullname" . | printf "%s-certs" }}
      {{- with .Values.nginx.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nginx.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nginx.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "tinkerbell.fullname" . | printf "%s-nginx" }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "tinkerbell.labels" . | nindent 4 }}
    app.kubernetes.io/name: nginx
    app.kubernetes.io/version: {{ .Values.nginx.image.tag }}
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: http
  selector:
    {{- include "tinkerbell.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/name: nginx
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "tinkerbell.fullname" . | printf "%s-nginx" }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "tinkerbell.labels" . | nindent 4 }}
    app.kubernetes.io/name: nginx
    app.kubernetes.io/version: {{ .Values.nginx.image.tag }}
spec:
  accessModes:
    - ReadWriteOnce
  {{- with .Values.nginx.persistence.storageClassName }}
  storageClassName: {{ . }}
  {{- end }}
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.nginx.persistence.size }}
